1 PEP Purpose and Guidelines
2 Procedure for Adding New Modules
3 Guidelines for Handling Bug Reports
4 Deprecation of Standard Modules
5 Guidelines for Language Evolution
6 Bug Fix Releases
7 Style Guide for C Code
8 Style Guide for Python Code
9 Sample Plaintext PEP Template
10 Voting Guidelines
11 Removing support for little used platforms
12 Sample reStructuredText PEP Template
20 The Zen of Python
42 Feature Requests
100 Python Unicode Integration
101 Doing Python Releases 101
102 Doing Python Micro Releases
103 Collecting information about git
160 Python 1.6 Release Schedule
200 Python 2.0 Release Schedule
201 Lockstep Iteration
202 List Comprehensions
203 Augmented Assignments
204 Range Literals
205 Weak References
206 Python Advanced Library
207 Rich Comparisons
208 Reworking the Coercion Model
209 Multi-dimensional Arrays
210 Decoupling the Interpreter Loop
211 Adding A New Outer Product Operator
212 Loop Counter Iteration
213 Attribute Access Handlers
214 Extended Print Statement
215 String Interpolation
216 Docstring Format
217 Display Hook for Interactive Use
218 Adding a Built-In Set Object Type
219 Stackless Python
220 Coroutines, Generators, Continuations
221 Import As
222 Web Library Enhancements
223 Change the Meaning of \x Escapes
224 Attribute Docstrings
225 Elementwise/Objectwise Operators
226 Python 2.1 Release Schedule
227 Statically Nested Scopes
228 Reworking Python's Numeric Model
229 Using Distutils to Build Python
230 Warning Framework
231 __findattr__()
232 Function Attributes
233 Python Online Help
234 Iterators
235 Import on Case-Insensitive Platforms
236 Back to the __future__
237 Unifying Long Integers and Integers
238 Changing the Division Operator
239 Adding a Rational Type to Python
240 Adding a Rational Literal to Python
241 Metadata for Python Software Packages
242 Numeric Kinds
243 Module Repository Upload Mechanism
244 The directive statement
245 Python Interface Syntax
246 Object Adaptation
247 API for Cryptographic Hash Functions
248 Python Database API Specification v1.0
249 Python Database API Specification v2.0
250 Using site-packages on Windows
251 Python 2.2 Release Schedule
252 Making Types Look More Like Classes
253 Subtyping Built-in Types
254 Making Classes Look More Like Types
255 Simple Generators
256 Docstring Processing System Framework
257 Docstring Conventions
258 Docutils Design Specification
259 Omit printing newline after newline
260 Simplify xrange()
261 Support for "wide" Unicode characters
262 A Database of Installed Python Packages
263 Defining Python Source Code Encodings
264 Future statements in simulated shells
265 Sorting Dictionaries by Value
266 Optimizing Global Variable/Attribute Access
267 Optimized Access to Module Namespaces
268 Extended HTTP functionality and WebDAV
269 Pgen Module for Python
270 uniq method for list objects
271 Prefixing sys.path by command line option
272 API for Block Encryption Algorithms v1.0
273 Import Modules from Zip Archives
274 Dict Comprehensions
275 Switching on Multiple Values
276 Simple Iterator for ints
277 Unicode file name support for Windows NT
278 Universal Newline Support
279 The enumerate() built-in function
280 Optimizing access to globals
281 Loop Counter Iteration with range and xrange
282 A Logging System
283 Python 2.3 Release Schedule
284 Integer for-loops
285 Adding a bool type
286 Enhanced Argument Tuples
287 reStructuredText Docstring Format
288 Generators Attributes and Exceptions
289 Generator Expressions
290 Code Migration and Modernization
291 Backward Compatibility for the Python 2 Standard ...
292 Simpler String Substitutions
293 Codec Error Handling Callbacks
294 Type Names in the types Module
295 Interpretation of multiline string constants
296 Adding a bytes Object Type
297 Support for System Upgrades
298 The Locked Buffer Interface
299 Special __main__() function in modules
301 Package Index and Metadata for Distutils
302 New Import Hooks
303 Extend divmod() for Multiple Divisors
304 Controlling Generation of Bytecode Files
305 CSV File API
306 How to Change Python's Grammar
307 Extensions to the pickle protocol
308 Conditional Expressions
309 Partial Function Application
310 Reliable Acquisition/Release Pairs
311 Simplified Global Interpreter Lock Acquisition for ...
312 Simple Implicit Lambda
313 Adding Roman Numeral Literals to Python
314 Metadata for Python Software Packages v1.1
315 Enhanced While Loop
316 Programming by Contract for Python
317 Eliminate Implicit Exception Instantiation
318 Decorators for Functions and Methods
319 Python Synchronize/Asynchronize Block
320 Python 2.4 Release Schedule
321 Date/Time Parsing and Formatting
322 Reverse Iteration
323 Copyable Iterators
324 subprocess - New process module
325 Resource-Release Support for Generators
326 A Case for Top and Bottom Values
327 Decimal Data Type
328 Imports: Multi-Line and Absolute/Relative
329 Treating Builtins as Constants in the Standard Library
330 Python Bytecode Verification
331 Locale-Independent Float/String Conversions
332 Byte vectors and String/Unicode Unification
333 Python Web Server Gateway Interface v1.0
334 Simple Coroutines via SuspendIteration
335 Overloadable Boolean Operators
336 Make None Callable
337 Logging Usage in the Standard Library
338 Executing modules as scripts
339 Design of the CPython Compiler
340 Anonymous Block Statements
341 Unifying try-except and try-finally
342 Coroutines via Enhanced Generators
343 The "with" Statement
344 Exception Chaining and Embedded Tracebacks
345 Metadata for Python Software Packages 1.2
346 User Defined ("with") Statements
347 Migrating the Python CVS to Subversion
348 Exception Reorganization for Python 3.0
349 Allow str() to return unicode strings
350 Codetags
351 The freeze protocol
352 Required Superclass for Exceptions
353 Using ssize_t as the index type
354 Enumerations in Python
355 Path - Object oriented filesystem paths
356 Python 2.5 Release Schedule
357 Allowing Any Object to be Used for Slicing
358 The "bytes" Object
359 The "make" Statement
360 Externally Maintained Packages
361 Python 2.6 and 3.0 Release Schedule
362 Function Signature Object
363 Syntax For Dynamic Attribute Access
364 Transitioning to the Py3K Standard Library
365 Adding the pkg_resources module
366 Main module explicit relative imports
367 New Super
368 Standard image protocol and class
369 Post import hooks
370 Per user site-packages directory
371 Addition of the multiprocessing package to the ...
372 Adding an ordered dictionary to collections
373 Python 2.7 Release Schedule
374 Choosing a distributed VCS for the Python project
375 Python 3.1 Release Schedule
376 Database of Installed Python Distributions
377 Allow __enter__() methods to skip the statement body
378 Format Specifier for Thousands Separator
379 Adding an Assignment Expression
380 Syntax for Delegating to a Subgenerator
381 Mirroring infrastructure for PyPI
382 Namespace Packages
383 Non-decodable Bytes in System Character Interfaces
384 Defining a Stable ABI
385 Migrating from Subversion to Mercurial
386 Changing the version comparison module in Distutils
387 Backwards Compatibility Policy
389 argparse - New Command Line Parsing Module
390 Static metadata for Distutils
391 Dictionary-Based Configuration For Logging
392 Python 3.2 Release Schedule
393 Flexible String Representation
394 The "python" Command on Unix-Like Systems
395 Qualified Names for Modules
396 Module Version Numbers
397 Python launcher for Windows
398 Python 3.3 Release Schedule
399 Pure Python/C Accelerator Module Compatibility ...
400 Deprecate codecs.StreamReader and codecs.StreamWriter
401 BDFL Retirement
402 Simplified Package Layout and Partitioning
403 General purpose decorator clause (aka "@in" clause)
404 Python 2.8 Un-release Schedule
405 Python Virtual Environments
406 Improved Encapsulation of Import State
407 New release cycle and introducing long-term support ...
408 Standard library __preview__ package
409 Suppressing exception context
410 Use decimal.Decimal type for timestamps
411 Provisional packages in the Python standard library
412 Key-Sharing Dictionary
413 Faster evolution of the Python Standard Library
414 Explicit Unicode Literal for Python 3.3
415 Implement context suppression with exception attributes
416 Add a frozendict builtin type
417 Including mock in the Standard Library
418 Add monotonic time, performance counter, and ...
419 Protecting cleanup statements from interruptions
420 Implicit Namespace Packages
421 Adding sys.implementation
422 Simpler customisation of class creation
423 Naming conventions and recipes related to packaging
424 A method for exposing a length hint
425 Compatibility Tags for Built Distributions
426 Metadata for Python Software Packages 2.0
427 The Wheel Binary Package Format 1.0
428 The pathlib module -- object-oriented filesystem paths
429 Python 3.4 Release Schedule
430 Migrating to Python 3 as the default online ...
431 Time zone support improvements
432 Restructuring the CPython startup sequence
433 Easier suppression of file descriptor inheritance
434 IDLE Enhancement Exception for All Branches
435 Adding an Enum type to the Python standard library
436 The Argument Clinic DSL
437 A DSL for specifying signatures, annotations and ...
438 Transitioning to release-file hosting on PyPI
439 Inclusion of implicit pip bootstrap in Python ...
440 Version Identification and Dependency Specification
441 Improving Python ZIP Application Support
442 Safe object finalization
443 Single-dispatch generic functions
444 Python Web3 Interface
445 Add new APIs to customize Python memory allocators
446 Make newly created file descriptors non-inheritable
447 Add __getdescriptor__ method to metaclass
448 Additional Unpacking Generalizations
449 Removal of the PyPI Mirror Auto Discovery and ...
450 Adding A Statistics Module To The Standard Library
451 A ModuleSpec Type for the Import System
452 API for Cryptographic Hash Functions v2.0
453 Explicit bootstrapping of pip in Python installations
454 Add a new tracemalloc module to trace Python memory ...
455 Adding a key-transforming dictionary to collections
456 Secure and interchangeable hash algorithm
457 Syntax For Positional-Only Parameters
458 Surviving a Compromise of PyPI
459 Standard Metadata Extensions for Python Software ...
460 Add binary interpolation and formatting
461 Adding % formatting to bytes and bytearray
462 Core development workflow automation for CPython
463 Exception-catching expressions
464 Removal of the PyPI Mirror Authenticity API
465 A dedicated infix operator for matrix multiplication
466 Network Security Enhancements for Python 2.7.x
467 Minor API improvements for binary sequences
468 Preserving the order of **kwargs in a function.
469 Migration of dict iteration code to Python 3
470 Removing External Hosting Support on PyPI
471 os.scandir() function -- a better and faster ...
472 Support for indexing with keyword arguments
473 Adding structured data to built-in exceptions
474 Creating forge.python.org
475 Retry system calls failing with EINTR
476 Enabling certificate verification by default for ...
477 Backport ensurepip (PEP 453) to Python 2.7
478 Python 3.5 Release Schedule
479 Change StopIteration handling inside generators
480 Surviving a Compromise of PyPI: The Maximum ...
481 Migrate CPython to Git, Github, and Phabricator
482 Literature Overview for Type Hints
483 The Theory of Type Hints
484 Type Hints
485 A Function for testing approximate equality
486 Make the Python Launcher aware of virtual environments
487 Simpler customisation of class creation
488 Elimination of PYO files
489 Multi-phase extension module initialization
490 Chain exceptions at C level
491 The Wheel Binary Package Format 1.9
492 Coroutines with async and await syntax
493 HTTPS verification migration tools for Python 2.7
494 Python 3.6 Release Schedule
495 Local Time Disambiguation
496 Environment Markers
497 A standard mechanism for backward compatibility
498 Literal String Interpolation
499 python -m foo should bind ...
500 A protocol for delegating datetime methods to their ...
501 General purpose string interpolation
502 String Interpolation - Extended Discussion
503 Simple Repository API
504 Using the System RNG by default
505 None-aware operators
506 Adding A Secrets Module To The Standard Library
507 Migrate CPython to Git and GitLab
508 Dependency specification for Python Software Packages
509 Add a private version to dict
510 Specialize functions with guards
511 API for code transformers
512 Migrating from hg.python.org to GitHub
513 A Platform Tag for Portable Linux Built Distributions
514 Python registration in the Windows registry
515 Underscores in Numeric Literals
516 Build system abstraction for pip/conda etc
517 A build-system independent format for source trees
518 Specifying Minimum Build System Requirements for ...
519 Adding a file system path protocol
520 Preserving Class Attribute Definition Order
521 Managing global context via 'with' blocks in ...
522 Allow BlockingIOError in security sensitive APIs
523 Adding a frame evaluation API to CPython
524 Make os.urandom() blocking on Linux
525 Asynchronous Generators
526 Syntax for Variable Annotations
527 Removing Un(der)used file types/extensions on PyPI
528 Change Windows console encoding to UTF-8
529 Change Windows filesystem encoding to UTF-8
530 Asynchronous Comprehensions
531 Existence checking operators
532 A circuit breaking protocol and binary operators
533 Deterministic cleanup for iterators
534 Distributing a Subset of the Standard Library
535 Rich comparison chaining
536 Final Grammar for Literal String Interpolation
537 Python 3.7 Release Schedule
538 Coercing the legacy C locale to a UTF-8 based locale
539 A New C-API for Thread-Local Storage in CPython
540 Add a new UTF-8 Mode
541 Package Index Name Retention
542 Dot Notation Assignment In Function Header
543 A Unified TLS API for Python
544 Protocols: Structural subtyping (static duck typing)
545 Python Documentation Translations
546 Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7
547 Running extension modules using the -m option
548 More Flexible Loop Control
549 Instance Descriptors
550 Execution Context
551 Security transparency in the Python runtime
552 Deterministic pycs
553 Built-in breakpoint()
554 Multiple Interpreters in the Stdlib
555 Context-local variables (contextvars)
556 Threaded garbage collection
557 Data Classes
558 Defined semantics for locals()
559 Built-in noop()
560 Core support for typing module and generic types
561 Distributing and Packaging Type Information
562 Module __getattr__ and __dir__
563 Postponed Evaluation of Annotations
564 Add new time functions with nanosecond resolution
565 Show DeprecationWarning in __main__
566 Metadata for Python Software Packages 2.1
567 Context Variables
568 Generator-sensitivity for Context Variables
569 Python 3.8 Release Schedule
570 Python Positional-Only Parameters
571 The manylinux2010 Platform Tag
572 Assignment Expressions
573 Module State Access from C Extension Methods
574 Pickle protocol 5 with out-of-band data
575 Unifying function/method classes
576 Rationalize Built-in function classes
577 Augmented Assignment Expressions
578 Python Runtime Audit Hooks
579 Refactoring C functions and methods
580 The C call protocol
628 Add math.tau
666 Reject Foolish Indentation
754 IEEE 754 Floating Point Special Values
801 Reserved
3000 Python 3000
3001 Procedure for reviewing and improving standard ...
3002 Procedure for Backwards-Incompatible Changes
3003 Python Language Moratorium
3099 Things that will Not Change in Python 3000
3100 Miscellaneous Python 3.0 Plans
3101 Advanced String Formatting
3102 Keyword-Only Arguments
3103 A Switch/Case Statement
3104 Access to Names in Outer Scopes
3105 Make print a function
3106 Revamping dict.keys(), .values() and .items()
3107 Function Annotations
3108 Standard Library Reorganization
3109 Raising Exceptions in Python 3000
3110 Catching Exceptions in Python 3000
3111 Simple input built-in in Python 3000
3112 Bytes literals in Python 3000
3113 Removal of Tuple Parameter Unpacking
3114 Renaming iterator.next() to iterator.__next__()
3115 Metaclasses in Python 3000
3116 New I/O
3117 Postfix type declarations
3118 Revising the buffer protocol
3119 Introducing Abstract Base Classes
3120 Using UTF-8 as the default source encoding
3121 Extension Module Initialization and Finalization
3122 Delineation of the main module
3123 Making PyObject_HEAD conform to standard C
3124 Overloading, Generic Functions, Interfaces, and ...
3125 Remove Backslash Continuation
3126 Remove Implicit String Concatenation
3127 Integer Literal Support and Syntax
3128 BList: A Faster List-like Type
3129 Class Decorators
3130 Access to Current Module/Class/Function
3131 Supporting Non-ASCII Identifiers
3132 Extended Iterable Unpacking
3133 Introducing Roles
3134 Exception Chaining and Embedded Tracebacks
3135 New Super
3136 Labeled break and continue
3137 Immutable Bytes and Mutable Buffer
3138 String representation in Python 3000
3139 Cleaning out sys and the "interpreter" module
3140 str(container) should call str(item), not repr(item)
3141 A Type Hierarchy for Numbers
3142 Add a "while" clause to generator expressions
3143 Standard daemon process library
3144 IP Address Manipulation Library for the Python ...
3145 Asynchronous I/O For subprocess.Popen
3146 Merging Unladen Swallow into CPython
3147 PYC Repository Directories
3148 futures - execute computations asynchronously
3149 ABI version tagged .so files
3150 Statement local namespaces (aka "given" clause)
3151 Reworking the OS and IO exception hierarchy
3152 Cofunctions
3153 Asynchronous IO support
3154 Pickle protocol version 4
3155 Qualified name for classes and functions
3156 Asynchronous IO Support Rebooted: the "asyncio" Module
3333 Python Web Server Gateway Interface v1.0.1
